import json
import pandas as pd
import sys
import os
import numpy as np

# Asegurar que la ra√≠z del proyecto est√° en sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from scripts.extract_url_features import extract_variables_from_url

# üìå URLs de prueba con distintos patrones
TEST_URLS = {
    "drive": "https://drive.google.com/file/d/1gyjW8k1wsZxk3eu4ylanEetEMSNN77m5/view?usp=sharing",
    "google": "https://www.google.com",
    
}

# üõ† Almacenar resultados de prueba
results = {}

def convert_numpy_types(obj):
    """Convierte tipos de NumPy a tipos nativos de Python para JSON."""
    if isinstance(obj, np.integer):
        return int(obj)
    if isinstance(obj, np.floating):
        return float(obj)
    if isinstance(obj, np.ndarray):
        return obj.tolist()
    return obj

# üöÄ Ejecutar pruebas
for label, url in TEST_URLS.items():
    print(f"üîç Probando {label}: {url}")
    try:
        variables = extract_variables_from_url(url)
        
        if not isinstance(variables, dict):
            raise ValueError(f"La funci√≥n extract_variables_from_url no devolvi√≥ un diccionario, sino {type(variables)}")

        results[label] = variables
    except Exception as e:
        print(f"‚ùå Error en {label}: {e}")
        results[label] = {"error": str(e)}

# üìä Convertir resultados a DataFrame para an√°lisis
df = pd.DataFrame.from_dict(results, orient="index")

# üíæ Guardar resultados en JSON para referencia
output_file = os.path.join(os.path.dirname(__file__), "test_results.json")
with open(output_file, "w", encoding="utf-8") as f:
    json.dump(results, f, indent=6, default=convert_numpy_types)

# üìä Mostrar an√°lisis de las variables num√©ricas
print("\nüìä Resumen de resultados (variables num√©ricas):")
print(df.describe(include=[np.number]).T.sort_values(by="mean", ascending=False))

# üîé Revisar valores constantes o sospechosos
constant_values = df.nunique().sort_values()
print("\nüîç Columnas con valores fijos (posibles errores):")
print(constant_values[constant_values == 1])

# üîé Revisar si hay valores inesperados en m√©tricas clave
suspicious_columns = ["google_index", "page_rank", "web_traffic"]
for col in suspicious_columns:
    if col in df.columns:
        print(f"\n‚ö†Ô∏è {col} valores:")
        print(df[col].value_counts())

# üîç Revisar valores nulos

print("\nüîç Variables no calculadas correctamente:")
for col in df.columns:
    if df[col].isnull().sum() > 0:
        print(f"‚ö†Ô∏è {col}: {df[col].isnull().sum()} valores nulos")

print(f"\n‚úÖ Test finalizado. Revisa `{output_file}` para m√°s detalles.")

